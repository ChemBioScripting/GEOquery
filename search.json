[{"path":[]},{"path":"http://seandavi.github.io/GEOquery/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://seandavi.github.io/GEOquery/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://seandavi.github.io/GEOquery/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://seandavi.github.io/GEOquery/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://seandavi.github.io/GEOquery/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement seandavi@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://seandavi.github.io/GEOquery/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://seandavi.github.io/GEOquery/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://seandavi.github.io/GEOquery/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://seandavi.github.io/GEOquery/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://seandavi.github.io/GEOquery/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://seandavi.github.io/GEOquery/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"overview-of-geo","dir":"Articles","previous_headings":"","what":"Overview of GEO","title":"Using the GEOquery Package","text":"NCBI Gene Expression Omnibus (GEO) serves public repository wide range high-throughput experimental data. data include single dual channel microarray-based experiments measuring mRNA, genomic DNA, protein abundance, well non-array techniques serial analysis gene expression (SAGE), mass spectrometry proteomic data, high-throughput sequencing data. basic level organization GEO, four basic entity types. first three (Sample, Platform, Series) supplied users; fourth, dataset, compiled curated GEO staff user-submitted data. See GEO home page information.","code":""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"platforms","dir":"Articles","previous_headings":"Overview of GEO","what":"Platforms","title":"Using the GEOquery Package","text":"Platform record describes list elements array (e.g., cDNAs, oligonucleotide probesets, ORFs, antibodies) list elements may detected quantified experiment (e.g., SAGE tags, peptides). Platform record assigned unique stable GEO accession number (GPLxxx). Platform may reference many Samples submitted multiple submitters.","code":""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"samples","dir":"Articles","previous_headings":"Overview of GEO","what":"Samples","title":"Using the GEOquery Package","text":"Sample record describes conditions individual Sample handled, manipulations underwent, abundance measurement element derived . Sample record assigned unique stable GEO accession number (GSMxxx). Sample entity must reference one Platform may included multiple Series.","code":""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"series","dir":"Articles","previous_headings":"Overview of GEO","what":"Series","title":"Using the GEOquery Package","text":"Series record defines set related Samples considered part group, Samples related, ordered. Series provides focal point description experiment whole. Series records may also contain tables describing extracted data, summary conclusions, analyses. Series record assigned unique stable GEO accession number (GSExxx). Series records available couple formats handled GEOquery independently. smaller new GSEMatrix files quite fast parse; simple flag used GEOquery choose use GSEMatrix files (see ).","code":""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"datasets","dir":"Articles","previous_headings":"Overview of GEO","what":"Datasets","title":"Using the GEOquery Package","text":"GEO DataSets (GDSxxx) curated sets GEO Sample data. GDS record represents collection biologically statistically comparable GEO Samples forms basis GEO’s suite data display analysis tools. Samples within GDS refer Platform, , share common set probe elements. Value measurements Sample within GDS assumed calculated equivalent manner, , considerations background processing normalization consistent across dataset. Information reflecting experimental design provided GDS subsets.","code":""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"getting-started-using-geoquery","dir":"Articles","previous_headings":"","what":"Getting Started using GEOquery","title":"Using the GEOquery Package","text":"Getting data GEO really quite easy. one command needed, getGEO. one function interprets input determine get data GEO parse data useful R data structures. Usage quite simple. loads GEOquery library. Now, free access GEO accession. Note following, use file packaged GEOquery package. general, use GEO accession, noted code comments. Now, gds contains R data structure (class GDS) represents GDS507 entry GEO. ’ll note filename used store download output screen (saved anywhere) later use call getGEO(filename=...). can GEO accession, GSM11805, GEO sample.","code":"library(GEOquery) # If you have network access, the more typical way to do this # would be to use this: # gds <- getGEO(\"GDS507\") gds <- getGEO(filename=system.file(\"extdata/GDS507.soft.gz\",package=\"GEOquery\")) # If you have network access, the more typical way to do this # would be to use this: # gds <- getGEO(\"GSM11805\") gsm <- getGEO(filename=system.file(\"extdata/GSM11805.txt.gz\",package=\"GEOquery\"))"},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"geoquery-data-structures","dir":"Articles","previous_headings":"","what":"GEOquery Data Structures","title":"Using the GEOquery Package","text":"GEOquery data structures really come two forms. first, comprising GDS, GPL, GSM behave similarly accessors similar effects . fourth GEOquery data structure, GSE composite data type made combination GSM GPL objects. explain first three together first.","code":""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"the-gds-gsm-and-gpl-classes","dir":"Articles","previous_headings":"GEOquery Data Structures","what":"The GDS, GSM, and GPL classes","title":"Using the GEOquery Package","text":"classes comprised metadata header (taken nearly verbatim SOFT format header) GEODataTable. GEODataTable two simple parts, Columns part describes column headers Table part. also show method class. example, using gsm : GPL class behaves exactly GSM class. However, GDS class bit information associated Columns method:","code":"# Look at gsm metadata: head(Meta(gsm)) ## $channel_count ## [1] \"1\" ##  ## $comment ## [1] \"Raw data provided as supplementary file\" ##  ## $contact_address ## [1] \"715 Albany Street, E613B\" ##  ## $contact_city ## [1] \"Boston\" ##  ## $contact_country ## [1] \"USA\" ##  ## $contact_department ## [1] \"Genetics and Genomics\" # Look at data associated with the GSM: # but restrict to only first 5 rows, for brevity Table(gsm)[1:5,] ##           ID_REF  VALUE ABS_CALL ## 1 AFFX-BioB-5_at  953.9        P ## 2 AFFX-BioB-M_at 2982.8        P ## 3 AFFX-BioB-3_at 1657.9        P ## 4 AFFX-BioC-5_at 2652.7        P ## 5 AFFX-BioC-3_at 2019.5        P # Look at Column descriptions: Columns(gsm) ##     Column ## 1          ## 2    VALUE ## 3 ABS_CALL ##                                                                  Description ## 1                                                                   ID_REF = ## 2                         MAS 5.0 Statistical Algorithm (mean scaled to 500) ## 3 MAS 5.0 Absent, Marginal, Present call  with Alpha1 = 0.05, Alpha2 = 0.065 Columns(gds)[,1:3] ##      sample disease.state individual ## 1  GSM11815           RCC        035 ## 2  GSM11832           RCC        023 ## 3  GSM12069           RCC        001 ## 4  GSM12083           RCC        005 ## 5  GSM12101           RCC        011 ## 6  GSM12106           RCC        032 ## 7  GSM12274           RCC          2 ## 8  GSM12299           RCC          3 ## 9  GSM12412           RCC          4 ## 10 GSM11810        normal        035 ## 11 GSM11827        normal        023 ## 12 GSM12078        normal        001 ## 13 GSM12099        normal        005 ## 14 GSM12269        normal          1 ## 15 GSM12287        normal          2 ## 16 GSM12301        normal          3 ## 17 GSM12448        normal          4"},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"the-gse-class","dir":"Articles","previous_headings":"GEOquery Data Structures","what":"The GSE class","title":"Using the GEOquery Package","text":"GSE entity confusing GEO entities. GSE entry can represent arbitrary number samples run arbitrary number platforms. GSE class metadata section, just like classes. However, doesn’t GEODataTable. Instead, contains two lists, accessible using GPLList GSMList methods, lists GPL GSM objects. show example: See additional, preferred method obtaining GSE information.","code":"# Again, with good network access, one would do: # gse <- getGEO(\"GSE781\",GSEMatrix=FALSE) gse <- getGEO(filename=system.file(\"extdata/GSE781_family.soft.gz\",package=\"GEOquery\")) head(Meta(gse)) ## $contact_address ## [1] \"715 Albany Street, E613B\" ##  ## $contact_city ## [1] \"Boston\" ##  ## $contact_country ## [1] \"USA\" ##  ## $contact_department ## [1] \"Genetics and Genomics\" ##  ## $contact_email ## [1] \"mlenburg@bu.edu\" ##  ## $contact_fax ## [1] \"617-414-1646\" # names of all the GSM objects contained in the GSE names(GSMList(gse)) ##  [1] \"GSM11805\" \"GSM11810\" \"GSM11814\" \"GSM11815\" \"GSM11823\" \"GSM11827\" ##  [7] \"GSM11830\" \"GSM11832\" \"GSM12067\" \"GSM12069\" \"GSM12075\" \"GSM12078\" ## [13] \"GSM12079\" \"GSM12083\" \"GSM12098\" \"GSM12099\" \"GSM12100\" \"GSM12101\" ## [19] \"GSM12105\" \"GSM12106\" \"GSM12268\" \"GSM12269\" \"GSM12270\" \"GSM12274\" ## [25] \"GSM12283\" \"GSM12287\" \"GSM12298\" \"GSM12299\" \"GSM12300\" \"GSM12301\" ## [31] \"GSM12399\" \"GSM12412\" \"GSM12444\" \"GSM12448\" # and get the first GSM object on the list GSMList(gse)[[1]] ## An object of class \"GSM\" ## channel_count  ## [1] \"1\" ## comment  ## [1] \"Raw data provided as supplementary file\" ## contact_address  ## [1] \"715 Albany Street, E613B\" ## contact_city  ## [1] \"Boston\" ## contact_country  ## [1] \"USA\" ## contact_department  ## [1] \"Genetics and Genomics\" ## contact_email  ## [1] \"mlenburg@bu.edu\" ## contact_fax  ## [1] \"617-414-1646\" ## contact_institute  ## [1] \"Boston University School of Medicine\" ## contact_name  ## [1] \"Marc,E.,Lenburg\" ## contact_phone  ## [1] \"617-414-1375\" ## contact_state  ## [1] \"MA\" ## contact_web_link  ## [1] \"http://gg.bu.edu\" ## contact_zip/postal_code  ## [1] \"02130\" ## data_row_count  ## [1] \"22283\" ## description  ## [1] \"Age = 70; Gender = Female; Right Kidney; Adjacent Tumor Type = clear cell; Adjacent Tumor Fuhrman Grade = 3; Adjacent Tumor Capsule Penetration = true; Adjacent Tumor Perinephric Fat Invasion = true; Adjacent Tumor Renal Sinus Invasion = false; Adjacent Tumor Renal Vein Invasion = true; Scaling Target = 500; Scaling Factor = 7.09; Raw Q = 2.39; Noise = 2.60; Background = 55.24.\" ## [2] \"Keywords = kidney\"                                                                                                                                                                                                                                                                                                                                                                            ## [3] \"Keywords = renal\"                                                                                                                                                                                                                                                                                                                                                                             ## [4] \"Keywords = RCC\"                                                                                                                                                                                                                                                                                                                                                                               ## [5] \"Keywords = carcinoma\"                                                                                                                                                                                                                                                                                                                                                                         ## [6] \"Keywords = cancer\"                                                                                                                                                                                                                                                                                                                                                                            ## [7] \"Lot batch = 2004638\"                                                                                                                                                                                                                                                                                                                                                                          ## geo_accession  ## [1] \"GSM11805\" ## last_update_date  ## [1] \"May 28 2005\" ## molecule_ch1  ## [1] \"total RNA\" ## organism_ch1  ## [1] \"Homo sapiens\" ## platform_id  ## [1] \"GPL96\" ## series_id  ## [1] \"GSE781\" ## source_name_ch1  ## [1] \"Trizol isolation of total RNA from normal tissue adjacent to Renal Cell Carcinoma\" ## status  ## [1] \"Public on Nov 25 2003\" ## submission_date  ## [1] \"Oct 20 2003\" ## supplementary_file  ## [1] \"ftp://ftp.ncbi.nih.gov/pub/geo/DATA/supplementary/samples/GSM11nnn/GSM11805/GSM11805.CEL.gz\" ## title  ## [1] \"N035 Normal Human Kidney U133A\" ## type  ## [1] \"RNA\" ## An object of class \"GEODataTable\" ## ****** Column Descriptions ****** ##     Column ## 1          ## 2    VALUE ## 3 ABS_CALL ##                                                                  Description ## 1                                                                   ID_REF = ## 2                         MAS 5.0 Statistical Algorithm (mean scaled to 500) ## 3 MAS 5.0 Absent, Marginal, Present call  with Alpha1 = 0.05, Alpha2 = 0.065 ## ****** Data Table ****** ##           ID_REF  VALUE ABS_CALL ## 1 AFFX-BioB-5_at  953.9        P ## 2 AFFX-BioB-M_at 2982.8        P ## 3 AFFX-BioB-3_at 1657.9        P ## 4 AFFX-BioC-5_at 2652.7        P ## 5 AFFX-BioC-3_at 2019.5        P ## 22278 more rows ... # and the names of the GPLs represented names(GPLList(gse)) ## [1] \"GPL96\" \"GPL97\""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"converting-to-bioconductor-expressionsets-and-limma-malists","dir":"Articles","previous_headings":"","what":"Converting to BioConductor ExpressionSets and limma MALists","title":"Using the GEOquery Package","text":"GEO datasets (unlike GEO entities), quite similar limma data structure MAList Biobase data structure ExpressionSet. Therefore, two functions, GDS2MA GDS2eSet accomplish task.","code":""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"getting-gse-series-matrix-files-as-an-expressionset","dir":"Articles","previous_headings":"Converting to BioConductor ExpressionSets and limma MALists","what":"Getting GSE Series Matrix files as an ExpressionSet","title":"Using the GEOquery Package","text":"GEO Series collections related experiments. addition available SOFT format files, quite large, NCBI GEO prepared simpler format file based tab-delimited text. getGEO function can handle format parse large GSEs quite quickly. data structure returned parsing list ExpressionSets. example, download parse GSE2553.","code":"# Note that GSEMatrix=TRUE is the default gse2553 <- getGEO('GSE2553',GSEMatrix=TRUE) show(gse2553) ## $GSE2553_series_matrix.txt.gz ## ExpressionSet (storageMode: lockedEnvironment) ## assayData: 12600 features, 181 samples  ##   element names: exprs  ## protocolData: none ## phenoData ##   sampleNames: GSM48681 GSM48682 ... GSM48861 (181 total) ##   varLabels: title geo_accession ... data_row_count (30 total) ##   varMetadata: labelDescription ## featureData ##   featureNames: 1 2 ... 12600 (12600 total) ##   fvarLabels: ID PenAt ... Chimeric_Cluster_IDs (13 total) ##   fvarMetadata: Column Description labelDescription ## experimentData: use 'experimentData(object)' ##   pubMedIds: 16230383  ## Annotation: GPL1977 show(pData(phenoData(gse2553[[1]]))[1:5,c(1,6,8)]) ##                                                                  title type ## GSM48681                      Patient sample ST18, Dermatofibrosarcoma  RNA ## GSM48682                           Patient sample ST410, Ewing Sarcoma  RNA ## GSM48683                            Patient sample ST130, Sarcoma, NOS  RNA ## GSM48684 Patient sample ST293, Malignant Peripheral Nerve Sheath Tumor  RNA ## GSM48685                             Patient sample ST367, Liposarcoma  RNA ##                                  source_name_ch1 ## GSM48681                     Dermatofibrosarcoma ## GSM48682                           Ewing Sarcoma ## GSM48683                            Sarcoma, NOS ## GSM48684 Malignant Peripheral Nerve Sheath Tumor ## GSM48685                             Liposarcoma"},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"converting-gds-to-an-expressionset","dir":"Articles","previous_headings":"Converting to BioConductor ExpressionSets and limma MALists","what":"Converting GDS to an ExpressionSet","title":"Using the GEOquery Package","text":"Taking gds object , can simply : Now, eset ExpressionSet contains information GEO dataset, including sample information, can see :","code":"eset <- GDS2eSet(gds,do.log2=TRUE) eset ## ExpressionSet (storageMode: lockedEnvironment) ## assayData: 22645 features, 17 samples  ##   element names: exprs  ## protocolData: none ## phenoData ##   sampleNames: GSM11815 GSM11832 ... GSM12448 (17 total) ##   varLabels: sample disease.state individual description ##   varMetadata: labelDescription ## featureData ##   featureNames: 200000_s_at 200001_at ... AFFX-TrpnX-M_at (22645 total) ##   fvarLabels: ID Gene title ... GO:Component ID (21 total) ##   fvarMetadata: Column labelDescription ## experimentData: use 'experimentData(object)' ##   pubMedIds: 14641932  ## Annotation: pData(eset)[,1:3] ##            sample disease.state individual ## GSM11815 GSM11815           RCC        035 ## GSM11832 GSM11832           RCC        023 ## GSM12069 GSM12069           RCC        001 ## GSM12083 GSM12083           RCC        005 ## GSM12101 GSM12101           RCC        011 ## GSM12106 GSM12106           RCC        032 ## GSM12274 GSM12274           RCC          2 ## GSM12299 GSM12299           RCC          3 ## GSM12412 GSM12412           RCC          4 ## GSM11810 GSM11810        normal        035 ## GSM11827 GSM11827        normal        023 ## GSM12078 GSM12078        normal        001 ## GSM12099 GSM12099        normal        005 ## GSM12269 GSM12269        normal          1 ## GSM12287 GSM12287        normal          2 ## GSM12301 GSM12301        normal          3 ## GSM12448 GSM12448        normal          4"},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"converting-gds-to-an-malist","dir":"Articles","previous_headings":"Converting to BioConductor ExpressionSets and limma MALists","what":"Converting GDS to an MAList","title":"Using the GEOquery Package","text":"annotation information (called platform information GEO) retrieved ExpressionSet contain slots gene information, typically. However, easy obtain information. First, need know platform GDS used. , another call getGEO get us need. , gpl now contains information GPL5 GEO. Unlike ExpressionSet, limma MAList store gene annotation information, can use newly created gpl class GPL call GDS2MA like : Now, MA class MAList contains data, sample information gene information associated GDS507.","code":"#get the platform from the GDS metadata Meta(gds)$platform ## [1] \"GPL97\" #So use this information in a call to getGEO gpl <- getGEO(filename=system.file(\"extdata/GPL97.annot.gz\",package=\"GEOquery\")) MA <- GDS2MA(gds,GPL=gpl) class(MA) ## [1] \"MAList\" ## attr(,\"package\") ## [1] \"limma\""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"converting-gse-to-an-expressionset","dir":"Articles","previous_headings":"Converting to BioConductor ExpressionSets and limma MALists","what":"Converting GSE to an ExpressionSet","title":"Using the GEOquery Package","text":"First, make sure using method described section ``Getting GSE Series Matrix files ExpressionSet’’ using GSE Series Matrix files sufficient task, much faster simpler. (.e., columns GSM needed), method needed. Converting GSE object ExpressionSet object currently takes bit R data manipulation due varied data can stored GSE underlying GSM GPL objects. However, using simple example hopefully illustrative technique. First, need make sure GSMs platform: Indeed, two GPLs, GPL96 GPL97, platforms (determined looking GPLList gse). can filter original GSMList include GSMs GPL96 platform use list processing , now like know column represents data like extract. Looking first rows Table single GSM likely give us idea (way, GEO uses convention column contains single measurement array called VALUE column, use don’t know column relevant). indeed use VALUE column. want make matrix values like : Note match make sure values platform information order. Finally, make ExpressionSet object: , using combination lapply GSMList, one can extract many columns interest necessary build data structure choice. GSM data GEO website fully downloaded included GSE object, one can extract foreground background well quality two-channel arrays, example. Getting array annotation also bit complicated, replacing ``platform’’ lapply call get platform information array, one can get information associated array.","code":"gsmplatforms <- lapply(GSMList(gse),function(x) {Meta(x)$platform_id}) head(gsmplatforms) ## $GSM11805 ## [1] \"GPL96\" ##  ## $GSM11810 ## [1] \"GPL97\" ##  ## $GSM11814 ## [1] \"GPL96\" ##  ## $GSM11815 ## [1] \"GPL97\" ##  ## $GSM11823 ## [1] \"GPL96\" ##  ## $GSM11827 ## [1] \"GPL97\" gsmlist = Filter(function(gsm) {Meta(gsm)$platform_id=='GPL96'},GSMList(gse)) length(gsmlist) ## [1] 17 Table(gsmlist[[1]])[1:5,] ##           ID_REF  VALUE ABS_CALL ## 1 AFFX-BioB-5_at  953.9        P ## 2 AFFX-BioB-M_at 2982.8        P ## 3 AFFX-BioB-3_at 1657.9        P ## 4 AFFX-BioC-5_at 2652.7        P ## 5 AFFX-BioC-3_at 2019.5        P # and get the column descriptions Columns(gsmlist[[1]])[1:5,] ##        Column ## 1             ## 2       VALUE ## 3    ABS_CALL ## NA       <NA> ## NA.1     <NA> ##                                                                     Description ## 1                                                                      ID_REF = ## 2                            MAS 5.0 Statistical Algorithm (mean scaled to 500) ## 3    MAS 5.0 Absent, Marginal, Present call  with Alpha1 = 0.05, Alpha2 = 0.065 ## NA                                                                         <NA> ## NA.1                                                                       <NA> # get the probeset ordering probesets <- Table(GPLList(gse)[[1]])$ID # make the data matrix from the VALUE columns from each GSM # being careful to match the order of the probesets in the platform # with those in the GSMs data.matrix <- do.call('cbind',lapply(gsmlist,function(x)                                        {tab <- Table(x)                                        mymatch <- match(probesets,tab$ID_REF)                                        return(tab$VALUE[mymatch])                                      })) data.matrix <- apply(data.matrix,2,function(x) {as.numeric(as.character(x))}) data.matrix <- log2(data.matrix) data.matrix[1:5,] ##       GSM11805  GSM11814  GSM11823  GSM11830  GSM12067  GSM12075  GSM12079 ## [1,] 10.926963 11.105254 11.275019 11.438636 11.424376 11.222795 11.469845 ## [2,]  5.749534  7.908092  7.093814  7.514122  7.901470  6.407693  5.165912 ## [3,]  7.066089  7.750205  7.244126  7.962896  7.337176  6.569856  7.477354 ## [4,] 12.660353 12.479755 12.215897 11.458355 11.397568 12.529870 12.240046 ## [5,]  6.195741  6.061776  6.565293  6.583459  6.877744  6.652486  3.981853 ##       GSM12098  GSM12100  GSM12105  GSM12268  GSM12270  GSM12283  GSM12298 ## [1,] 10.823367 10.835971 10.810893 11.062653 10.323055 11.181028 11.566387 ## [2,]  6.556123  8.207014  6.816344  6.563768  7.353147  5.770829  6.912889 ## [3,]  7.708739  7.428779  7.754888  7.126188  8.742815  7.339850  7.602142 ## [4,] 12.336534 11.762839 11.237509 12.412490 11.213408 12.678380 12.232901 ## [5,]  5.501439  6.247928  6.017922  6.525129  6.683696  5.918863  5.837943 ##       GSM12300  GSM12399  GSM12444 ## [1,] 11.078151 11.535178 11.105450 ## [2,]  4.812498  7.471675  7.488644 ## [3,]  7.383704  7.432959  7.381110 ## [4,] 12.090939 11.421802 12.172834 ## [5,]  6.281698  5.419539  5.469235 require(Biobase) # go through the necessary steps to make a compliant ExpressionSet rownames(data.matrix) <- probesets colnames(data.matrix) <- names(gsmlist) pdata <- data.frame(samples=names(gsmlist)) rownames(pdata) <- names(gsmlist) pheno <- as(pdata,\"AnnotatedDataFrame\") eset2 <- new('ExpressionSet',exprs=data.matrix,phenoData=pheno) eset2 ## ExpressionSet (storageMode: lockedEnvironment) ## assayData: 22283 features, 17 samples  ##   element names: exprs  ## protocolData: none ## phenoData ##   sampleNames: GSM11805 GSM11814 ... GSM12444 (17 total) ##   varLabels: samples ##   varMetadata: labelDescription ## featureData: none ## experimentData: use 'experimentData(object)' ## Annotation:"},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"accessing-raw-data-from-geo","dir":"Articles","previous_headings":"","what":"Accessing Raw Data from GEO","title":"Using the GEOquery Package","text":"NCBI GEO accepts (always required) raw data .CEL files, .CDF files, images, etc. Sometimes, useful get quick access data. single function, getGEOSuppFiles, can take argument GEO accession download raw data associate accession. default, function create directory current working directory store raw data chosen GEO accession. Combining simple sapply statement loop structure getGEOSuppFiles makes simple way get gobs raw data quickly easily without needing know specifics GEO raw data URLs.","code":""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"use-cases","dir":"Articles","previous_headings":"","what":"Use Cases","title":"Using the GEOquery Package","text":"GEOquery can quite powerful gathering lot data quickly. examples can useful show might done data mining purposes.","code":""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"getting-all-series-records-for-a-given-platform","dir":"Articles","previous_headings":"Use Cases","what":"Getting all Series Records for a Given Platform","title":"Using the GEOquery Package","text":"data mining purposes, sometimes useful able pull GSE records given platform. GEOquery makes easy, little bit knowledge GPL record necessary get started. GPL record contains GSE GSM accessions reference . code useful illustrate point: code loads GPL97 record R. Meta method extracts list header information GPL record. title gives human name platform. series_id gives vector series ids. Note 165 series associated platform 7917 samples. Code like following used download samples series. show first 5 samples example:","code":"gpl97 <- getGEO('GPL97') Meta(gpl97)$title ## [1] \"[HG-U133B] Affymetrix Human Genome U133B Array\" head(Meta(gpl97)$series_id) ## [1] \"GSE362\" \"GSE473\" \"GSE620\" \"GSE674\" \"GSE781\" \"GSE907\" length(Meta(gpl97)$series_id) ## [1] 165 head(Meta(gpl97)$sample_id) ## [1] \"GSM3922\" \"GSM3924\" \"GSM3926\" \"GSM3928\" \"GSM3930\" \"GSM3932\" length(Meta(gpl97)$sample_id) ## [1] 7917 gsmids <- Meta(gpl97)$sample_id gsmlist <- sapply(gsmids[1:5],getGEO) names(gsmlist) ## [1] \"GSM3922\" \"GSM3924\" \"GSM3926\" \"GSM3928\" \"GSM3930\""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Using the GEOquery Package","text":"GEOquery package provides bridge vast array resources contained NCBI GEO repositories. maintaining full richness GEO data rather focusing getting ``numbers’’, possible integrate GEO data current Bioconductor data structures perform analyses data quite quickly easily. tools hopefully open GEO data fully array community large.","code":""},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"citing-geoquery","dir":"Articles","previous_headings":"Conclusion","what":"Citing GEOquery","title":"Using the GEOquery Package","text":"Please consider citing GEOquery used support research:","code":"citation(\"GEOquery\") ##  ## Please cite the following if utilizing the GEOquery software: ##  ##   Davis, S. and Meltzer, P. S. GEOquery: a bridge between the Gene ##   Expression Omnibus (GEO) and BioConductor. Bioinformatics, 2007, 14, ##   1846-1847 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Article{, ##     author = {Sean Davis and Paul Meltzer}, ##     title = {GEOquery: a bridge between the Gene Expression Omnibus (GEO) and BioConductor}, ##     journal = {Bioinformatics}, ##     year = {2007}, ##     volume = {14}, ##     pages = {1846--1847}, ##   }"},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"reporting-problems-or-bugs","dir":"Articles","previous_headings":"Conclusion","what":"Reporting problems or bugs","title":"Using the GEOquery Package","text":"run problems using GEOquery, Bioconductor Support site good first place ask help. convinced bug GEOquery (pretty unusual, unheard ), feel free submit issue GEOquery github site file bug report directly R (open new github issue):","code":"bug.report(package='GEOquery')"},{"path":"http://seandavi.github.io/GEOquery/articles/GEOquery.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Using the GEOquery Package","text":"following package versions used production vignette.","code":"## R version 4.2.0 (2022-04-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] GEOquery_2.65.2     Biobase_2.56.0      BiocGenerics_0.42.0 ## [4] knitr_1.39          ##  ## loaded via a namespace (and not attached): ##  [1] bslib_0.3.1       compiler_4.2.0    pillar_1.7.0      jquerylib_0.1.4   ##  [5] R.methodsS3_1.8.1 R.utils_2.11.0    tools_4.2.0       digest_0.6.29     ##  [9] tibble_3.1.7      jsonlite_1.8.0    evaluate_0.15     memoise_2.0.1     ## [13] lifecycle_1.0.1   pkgconfig_2.0.3   rlang_1.0.2       cli_3.3.0         ## [17] curl_4.3.2        yaml_2.3.5        pkgdown_2.0.3     xfun_0.31         ## [21] fastmap_1.1.0     xml2_1.3.3        stringr_1.4.0     dplyr_1.0.9       ## [25] hms_1.1.1         desc_1.4.1        generics_0.1.2    fs_1.5.2          ## [29] sass_0.4.1        vctrs_0.4.1       systemfonts_1.0.4 tidyselect_1.1.2  ## [33] rprojroot_2.0.3   glue_1.6.2        data.table_1.14.2 R6_2.5.1          ## [37] textshaping_0.3.6 fansi_1.0.3       rmarkdown_2.14    limma_3.52.0      ## [41] tidyr_1.2.0       tzdb_0.3.0        readr_2.1.2       purrr_0.3.4       ## [45] magrittr_2.0.3    htmltools_0.5.2   ellipsis_0.3.2    ragg_1.2.2        ## [49] utf8_1.2.2        stringi_1.7.6     cachem_1.0.6      crayon_1.5.1      ## [53] R.oo_1.24.0"},{"path":"http://seandavi.github.io/GEOquery/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean Davis. Author, maintainer.","code":""},{"path":"http://seandavi.github.io/GEOquery/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davis, S. Meltzer, P. S. GEOquery: bridge Gene Expression Omnibus (GEO) BioConductor. Bioinformatics, 2007, 14, 1846-1847","code":"@Article{,   author = {Sean Davis and Paul Meltzer},   title = {GEOquery: a bridge between the Gene Expression Omnibus (GEO) and BioConductor},   journal = {Bioinformatics},   year = {2007},   volume = {14},   pages = {1846--1847}, }"},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Get data from NCBI Gene Expression Omnibus (GEO)","text":"install Bioconductor, use following code: install directly github:","code":"if (!requireNamespace(\"BiocManager\", quietly=TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"GEOquery\") library(devtools) install_github('GEOquery','seandavi')"},{"path":"http://seandavi.github.io/GEOquery/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Get data from NCBI Gene Expression Omnibus (GEO)","text":"See full vignette rmarkdown visit Bioconductor details: Release version Devel version","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GDS-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"class describing GEO GDS entity","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GDS-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"GDS\", ...)","code":""},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/reference/GDS-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Sean Davis","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GEOData-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic functions for GEOquery — GEOData-accessors","title":"Generic functions for GEOquery — GEOData-accessors","text":"main documentation Class documentation","code":""},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/reference/GEOData-accessors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generic functions for GEOquery — GEOData-accessors","text":"Sean Davis","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GEOData-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"virtual class holding GEO samples, platforms, datasets","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GEOData-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"GEOData\", ...).","code":""},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/reference/GEOData-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Sean Davis","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GEODataTable-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Contains column descriptions data datatable part GEO object","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GEODataTable-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"GEODataTable\", ...).","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GEODataTable-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Sean Davis","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GPL-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Contains full GEO Platform entity","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GPL-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"GPL\", ...).","code":""},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/reference/GPL-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Sean Davis","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GSE-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Contains GEO Series entity","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GSE-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"GSE\", ...).","code":""},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/reference/GSE-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Sean Davis","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GSM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"class containing GEO Sample entity","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/GSM-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"GSM\", ...).","code":""},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/reference/GSM-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Sean Davis","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/coercion.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a GDS data structure to a BioConductor data structure — coercion","title":"Convert a GDS data structure to a BioConductor data structure — coercion","text":"Functions take GDS data structure getGEO coerce limma MALists ExpressionSets.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/coercion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a GDS data structure to a BioConductor data structure — coercion","text":"GDS GDS datastructure returned getGEO .log2 Boolean, data GDS log2 transformed inserting new data structure GPL Either GPL data structure (call getGEO) NULL.  NULL, cause call getGEO produce GPL.  gene information GPL used construct genes slot resulting limma MAList object featureData slot ExpressionSet instance. AnnotGPL general, annotation GPL files available GDS records, default use files user-submitted GPL files getGPL boolean defaulting TRUE whether download include GPL information converting ExpressionSet MAList.  may want set FALSE know going annotate featureData using Bioconductor tools rather relying information provided NCBI GEO.  Download times can also greatly reduced specifying FALSE.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/coercion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a GDS data structure to a BioConductor data structure — coercion","text":"GDS2MA limma MAList GDS2eSet ExpressionSet object","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/coercion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a GDS data structure to a BioConductor data structure — coercion","text":"function just rearranges one data structure another.  GDS, also deals appropriately making \"targets\" list item limma data structure phenoData slot ExpressionSets.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/coercion.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert a GDS data structure to a BioConductor data structure — coercion","text":"See limma ExpressionSet help appropriate packages","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/coercion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a GDS data structure to a BioConductor data structure — coercion","text":"Sean Davis","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/coercion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a GDS data structure to a BioConductor data structure — coercion","text":"","code":"if (FALSE) gds505 <- getGEO('GDS505') if (FALSE) MA <- GDS2MA(gds505) if (FALSE) eset <- GDS2eSet(gds505)"},{"path":"http://seandavi.github.io/GEOquery/reference/getDirListing.html","id":null,"dir":"Reference","previous_headings":"","what":"get a directory listing from NCBI GEO — getDirListing","title":"get a directory listing from NCBI GEO — getDirListing","text":"one makes assumptions structure HTML response returned.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getDirListing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get a directory listing from NCBI GEO — getDirListing","text":"","code":"getDirListing(url)"},{"path":"http://seandavi.github.io/GEOquery/reference/getDirListing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get a directory listing from NCBI GEO — getDirListing","text":"url URL, assumed return NCBI-formatted index page","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEO.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a GEO object from NCBI or file — getGEO","title":"Get a GEO object from NCBI or file — getGEO","text":"function main user-level function GEOquery package.  directs download (filename specified) parsing GEO SOFT format file R data structure specifically designed make access important parts GEO SOFT format easily accessible.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a GEO object from NCBI or file — getGEO","text":"","code":"getGEO(   GEO = NULL,   filename = NULL,   destdir = tempdir(),   GSElimits = NULL,   GSEMatrix = TRUE,   AnnotGPL = FALSE,   getGPL = TRUE,   parseCharacteristics = TRUE )"},{"path":"http://seandavi.github.io/GEOquery/reference/getGEO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a GEO object from NCBI or file — getGEO","text":"GEO character string representing GEO object download parsing.  (eg., 'GDS505','GSE2','GSM2','GPL96') filename filename previously downloaded GEO SOFT format file gzipped representation (case filename must end .gz). Either one GEO filename may specified, .  GEO series matrix files also handled.  Note since single file parsed, return value list esets, single eset GSE matrix files parsed. destdir destination directory downloads.  Defaults architecture-dependent tempdir.  may want specify different directory want save file later use.  good idea slow connection, GEO files HUGE! GSElimits argument can used load contiguous subset GSMs GSE.  specified vector length 2 specifying start end (inclusive) GSMs load.  useful splitting large GSEs manageable parts, example. GSEMatrix boolean telling GEOquery whether use GSE Series Matrix files GEO.  parsing files can many orders--magnitude faster parsing GSE SOFT format files.  Defaults TRUE, meaning SOFT format parsing occur; set FALSE reason need columns GSE records. AnnotGPL boolean defaulting FALSE whether use Annotation GPL information.  files nice use contain --date information remapped Entrez Gene regular basis. However, exist GPLs; general, available GPLs referenced GDS getGPL boolean defaulting TRUE whether download include GPL information getting GSEMatrix file.  may want set FALSE know going annotate featureData using Bioconductor tools rather relying information provided NCBI GEO.  Download times can also greatly reduced specifying FALSE. parseCharacteristics boolean defaulting TRUE whether parse characteristics information (available) GSE Matrix file. Set FALSE experience trouble parsing characteristics.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a GEO object from NCBI or file — getGEO","text":"object appropriate class (GDS, GPL, GSM, GSE) returned.  GSEMatrix option used, list ExpressionSet objects returned, one SeriesMatrix file associated GSE accesion.  filename argument used combination GSEMatrix file, return value single ExpressionSet.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEO.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a GEO object from NCBI or file — getGEO","text":"getGEO functions download parse information available NCBI GEO (http://www.ncbi.nlm.nih.gov/geo).  details avaible GEO.  entity types handled getGEO essentially information GEO SOFT format reflected resulting data structure. GEO website: Gene Expression Omnibus (GEO) NCBI serves public repository wide range high-throughput experimental data. data include single dual channel microarray-based experiments measuring mRNA, genomic DNA, protein abundance, well non-array techniques serial analysis gene expression (SAGE), mass spectrometry proteomic data. basic level organization GEO, three entity types may supplied users: Platforms, Samples, Series. Additionally, curated entity called GEO dataset. Platform record describes list elements array (e.g., cDNAs, oligonucleotide probesets, ORFs, antibodies) list elements may detected quantified experiment (e.g., SAGE tags, peptides). Platform record assigned unique stable GEO accession number (GPLxxx). Platform may reference many Samples submitted multiple submitters. Sample record describes conditions individual Sample handled, manipulations underwent, abundance measurement element derived . Sample record assigned unique stable GEO accession number (GSMxxx). Sample entity must reference one Platform may included multiple Series. Series record defines set related Samples considered part group, Samples related, ordered. Series provides focal point description experiment whole. Series records may also contain tables describing extracted data, summary conclusions, analyses. Series record assigned unique stable GEO accession number (GSExxx). GEO DataSets (GDSxxx) curated sets GEO Sample data. GDS record represents collection biologically statistically comparable GEO Samples forms basis GEO's suite data display analysis tools. Samples within GDS refer Platform, , share common set probe elements. Value measurements Sample within GDS assumed calculated equivalent manner, , considerations background processing normalization consistent across dataset. Information reflecting experimental design provided GDS subsets.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEO.html","id":"warning-","dir":"Reference","previous_headings":"","what":"Warning","title":"Get a GEO object from NCBI or file — getGEO","text":"files downloaded, particularly associated GSE entries GEO absolutely ENORMOUS parsing can take quite time memory.  , particularly working large GSE entries, expect may need good chunk memory coffee may involved parsing....","code":""},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/reference/getGEO.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a GEO object from NCBI or file — getGEO","text":"Sean Davis","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a GEO object from NCBI or file — getGEO","text":"","code":"gds <- getGEO(\"GDS10\") gds #> An object of class \"GDS\" #> channel_count  #> [1] \"1\" #> dataset_id  #>  [1] \"GDS10\" \"GDS10\" \"GDS10\" \"GDS10\" \"GDS10\" \"GDS10\" \"GDS10\" \"GDS10\" \"GDS10\" #> [10] \"GDS10\" \"GDS10\" \"GDS10\" #> description  #>  [1] \"Examination of spleen and thymus of type 1 diabetes nonobese diabetic (NOD) mouse, four NOD-derived diabetes-resistant congenic strains and two nondiabetic control strains.\" #>  [2] \"spleen\"                                                                                                                                                                       #>  [3] \"thymus\"                                                                                                                                                                       #>  [4] \"NOD\"                                                                                                                                                                          #>  [5] \"Idd3\"                                                                                                                                                                         #>  [6] \"Idd5\"                                                                                                                                                                         #>  [7] \"Idd3+Idd5\"                                                                                                                                                                    #>  [8] \"Idd9\"                                                                                                                                                                         #>  [9] \"B10.H2g7\"                                                                                                                                                                     #> [10] \"B10.H2g7 Idd3\"                                                                                                                                                                #> [11] \"diabetic\"                                                                                                                                                                     #> [12] \"diabetic-resistant\"                                                                                                                                                           #> [13] \"nondiabetic\"                                                                                                                                                                  #> email  #> [1] \"geo@ncbi.nlm.nih.gov\" #> feature_count  #> [1] \"39114\" #> institute  #> [1] \"NCBI NLM NIH\" #> name  #> [1] \"Gene Expression Omnibus (GEO)\" #> order  #> [1] \"none\" #> platform  #> [1] \"GPL24\" #> platform_organism  #> [1] \"Mus musculus\" #> platform_technology_type  #> [1] \"in situ oligonucleotide\" #> pubmed_id  #> [1] \"11827943\" #> ref  #> [1] \"Nucleic Acids Res. 2005 Jan 1;33 Database Issue:D562-6\" #> reference_series  #> [1] \"GSE11\" #> sample_count  #> [1] \"28\" #> sample_id  #>  [1] \"GSM582,GSM583,GSM584,GSM585,GSM586,GSM587,GSM588,GSM589,GSM590,GSM591,GSM592,GSM593,GSM594,GSM595\"               #>  [2] \"GSM596,GSM597,GSM598,GSM599,GSM600,GSM601,GSM602,GSM603,GSM604,GSM605,GSM606,GSM607,GSM608,GSM609\"               #>  [3] \"GSM582,GSM589,GSM596,GSM603\"                                                                                     #>  [4] \"GSM583,GSM590,GSM597,GSM604\"                                                                                     #>  [5] \"GSM584,GSM591,GSM598,GSM605\"                                                                                     #>  [6] \"GSM585,GSM592,GSM599,GSM606\"                                                                                     #>  [7] \"GSM586,GSM593,GSM600,GSM607\"                                                                                     #>  [8] \"GSM587,GSM594,GSM601,GSM608\"                                                                                     #>  [9] \"GSM588,GSM595,GSM602,GSM609\"                                                                                     #> [10] \"GSM582,GSM589,GSM596,GSM603\"                                                                                     #> [11] \"GSM583,GSM590,GSM597,GSM604,GSM584,GSM591,GSM598,GSM605,GSM585,GSM592,GSM599,GSM606,GSM586,GSM593,GSM600,GSM607\" #> [12] \"GSM587,GSM594,GSM601,GSM608,GSM588,GSM595,GSM602,GSM609\"                                                         #> sample_organism  #> [1] \"Mus musculus\" #> sample_type  #> [1] \"RNA\" #> title  #> [1] \"Type 1 diabetes gene expression profiling\" #> type  #>  [1] \"Expression profiling by array\" \"tissue\"                        #>  [3] \"tissue\"                        \"strain\"                        #>  [5] \"strain\"                        \"strain\"                        #>  [7] \"strain\"                        \"strain\"                        #>  [9] \"strain\"                        \"strain\"                        #> [11] \"disease state\"                 \"disease state\"                 #> [13] \"disease state\"                 #> update_date  #> [1] \"Jul 15 2003\" #> value_type  #> [1] \"count\" #> web_link  #> [1] \"http://www.ncbi.nlm.nih.gov/geo\" #> An object of class \"GEODataTable\" #> ****** Column Descriptions ****** #>    sample tissue        strain      disease.state #> 1  GSM582 spleen           NOD           diabetic #> 2  GSM589 spleen           NOD           diabetic #> 3  GSM583 spleen          Idd3 diabetic-resistant #> 4  GSM590 spleen          Idd3 diabetic-resistant #> 5  GSM584 spleen          Idd5 diabetic-resistant #> 6  GSM591 spleen          Idd5 diabetic-resistant #> 7  GSM585 spleen     Idd3+Idd5 diabetic-resistant #> 8  GSM592 spleen     Idd3+Idd5 diabetic-resistant #> 9  GSM586 spleen          Idd9 diabetic-resistant #> 10 GSM593 spleen          Idd9 diabetic-resistant #> 11 GSM587 spleen      B10.H2g7        nondiabetic #> 12 GSM594 spleen      B10.H2g7        nondiabetic #> 13 GSM588 spleen B10.H2g7 Idd3        nondiabetic #> 14 GSM595 spleen B10.H2g7 Idd3        nondiabetic #> 15 GSM596 thymus           NOD           diabetic #> 16 GSM603 thymus           NOD           diabetic #> 17 GSM597 thymus          Idd3 diabetic-resistant #> 18 GSM604 thymus          Idd3 diabetic-resistant #> 19 GSM598 thymus          Idd5 diabetic-resistant #> 20 GSM605 thymus          Idd5 diabetic-resistant #> 21 GSM599 thymus     Idd3+Idd5 diabetic-resistant #> 22 GSM606 thymus     Idd3+Idd5 diabetic-resistant #> 23 GSM600 thymus          Idd9 diabetic-resistant #> 24 GSM607 thymus          Idd9 diabetic-resistant #> 25 GSM601 thymus      B10.H2g7        nondiabetic #> 26 GSM608 thymus      B10.H2g7        nondiabetic #> 27 GSM602 thymus B10.H2g7 Idd3        nondiabetic #> 28 GSM609 thymus B10.H2g7 Idd3        nondiabetic #>                                        description #> 1            Value for GSM582: NOD_S1; src: Spleen #> 2            Value for GSM589: NOD_S2; src: Spleen #> 3           Value for GSM583: Idd3_S1; src: Spleen #> 4           Value for GSM590: Idd3_S2; src: Spleen #> 5           Value for GSM584: Idd5_S1; src: Spleen #> 6           Value for GSM591: Idd5_S2; src: Spleen #> 7         Value for GSM585: Idd3+5_S1; src: Spleen #> 8         Value for GSM592: Idd3+5_S2; src: Spleen #> 9           Value for GSM586: Idd9_S1; src: Spleen #> 10          Value for GSM593: Idd9_S2; src: Spleen #> 11      Value for GSM587: B10.H2g7_S1; src: Spleen #> 12      Value for GSM594: B10.H2g7_S2; src: Spleen #> 13 Value for GSM588: B10.H2g7 Idd3_S1; src: Spleen #> 14 Value for GSM595: B10.H2g7 Idd3_S2; src: Spleen #> 15           Value for GSM596: NOD_T1; src: Thymus #> 16           Value for GSM603: NOD_T2; src: Thymus #> 17          Value for GSM597: Idd3_T1; src: Thymus #> 18          Value for GSM604: Idd3_T2; src: Thymus #> 19          Value for GSM598: Idd5_T1; src: Thymus #> 20          Value for GSM605: Idd5_T2; src: Thymus #> 21        Value for GSM599: Idd3+5_T1; src: Thymus #> 22        Value for GSM606: Idd3+5_T2; src: Thymus #> 23          Value for GSM600: Idd9_T1; src: Thymus #> 24          Value for GSM607: Idd9_T2; src: Thymus #> 25      Value for GSM601: B10.H2g7_T1; src: Thymus #> 26      Value for GSM608: B10.H2g7_T2; src: Thymus #> 27 Value for GSM602: B10.H2g7 Idd3_T1; src: Thymus #> 28 Value for GSM609: B10.H2g7 Idd3_T2; src: Thymus #> ****** Data Table ****** #>   ID_REF    IDENTIFIER GSM582 GSM589 GSM583 GSM590 GSM584 GSM591 GSM585 GSM592 #> 1      1 1200011I18Rik    101     54    111     55     87     30     99     43 #> 2      2             2     26     23     30     27     19     22     32     19 #> 3      3       Ccdc28b     NA     NA     NA     NA     NA     NA     NA     NA #> 4      4      AA014405    233    162    252    178    214    144    238    147 #> 5      5        Crebrf     NA     NA     NA     NA     NA     NA     NA     NA #>   GSM586 GSM593 GSM587 GSM594 GSM588 GSM595 GSM596 GSM603 GSM597 GSM604 GSM598 #> 1    105     56     43     14    112     43     97     36    117     40    125 #> 2     24     25     14     49     32     29     31     22     26     26     35 #> 3     NA     NA     NA      7     NA      4     10     22     NA     15     NA #> 4    250    166     86     22    236    139    216    112    241    130    270 #> 5     NA     NA     NA     NA     NA      3     NA     NA     NA     NA     NA #>   GSM605 GSM599 GSM606 GSM600 GSM607 GSM601 GSM608 GSM602 GSM609 #> 1     45     99      1    109     38     87     18     72     16 #> 2     26     18     13     25     32     28     40     14     41 #> 3     23     NA     29      9     25     11     40     NA     22 #> 4    144    239    148    211    139    208     16    174     15 #> 5     NA     NA     NA     NA     NA     NA     NA     NA     NA #> 39109 more rows ...  gse <- getGEO('GSE10') #> Found 1 file(s) #> GSE10_series_matrix.txt.gz # Returns a list, so look at first item  gse[[1]] #> ExpressionSet (storageMode: lockedEnvironment) #> assayData: 96903 features, 4 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: GSM571 GSM572 GSM573 GSM574 #>   varLabels: title geo_accession ... data_row_count (34 total) #>   varMetadata: labelDescription #> featureData #>   featureNames: AAAAAAAAAA AAAAAAAAAC ... TTTTTTTTTT (96903 total) #>   fvarLabels: TAG GI #>   fvarMetadata: Column Description labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 11756676  #> Annotation: GPL4"},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOSuppFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Supplemental Files from GEO — getGEOSuppFiles","title":"Get Supplemental Files from GEO — getGEOSuppFiles","text":"NCBI GEO allows supplemental files attached GEO Series (GSE), GEO platforms (GPL), GEO samples (GSM).  function \"knows\" get files based GEO accession.  parsing downloaded files attempted, since file format generally knowable computer.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOSuppFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Supplemental Files from GEO — getGEOSuppFiles","text":"","code":"getGEOSuppFiles(   GEO,   makeDirectory = TRUE,   baseDir = getwd(),   fetch_files = TRUE,   filter_regex = NULL )"},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOSuppFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Supplemental Files from GEO — getGEOSuppFiles","text":"GEO GEO accession number GPL1073 GSM1137 makeDirectory \"subdirectory\" downloaded files created?  Default TRUE.  FALSE, files downloaded directly baseDir. baseDir base directory downloads.  Default current working directory. fetch_files logical(1). TRUE, actually download files. FALSE, just return filenames downloaded. Useful testing getting list files without actual download. filter_regex character(1) regular expression used filter filenames GEO limit files downloaded. useful limit , example, bed files .","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOSuppFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Supplemental Files from GEO — getGEOSuppFiles","text":"fetch_files=TRUE, data frame returned invisibly rownames representing full path resulting downloaded files records data.frame output file.info downloaded file. fetch_files=FALSE, data.frame URLs filenames returned.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOSuppFiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Supplemental Files from GEO — getGEOSuppFiles","text":", just note files simply downloaded.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOSuppFiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Supplemental Files from GEO — getGEOSuppFiles","text":"Sean Davis <sdavis2@mail.nih.gov>","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOSuppFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Supplemental Files from GEO — getGEOSuppFiles","text":"","code":"a <- getGEOSuppFiles('GSM1137', fetch_files = FALSE) a #>            fname #> 1 GSM1137.CEL.gz #>                                                                              url #> 1 https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM1nnn/GSM1137/suppl//GSM1137.CEL.gz"},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a file from GEO soft file to the local machine — getGEOfile","title":"Download a file from GEO soft file to the local machine — getGEOfile","text":"function simply downloads SOFT format file associated GEO accession number given.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a file from GEO soft file to the local machine — getGEOfile","text":"","code":"getGEOfile(   GEO,   destdir = tempdir(),   AnnotGPL = FALSE,   amount = c(\"full\", \"brief\", \"quick\", \"data\") )"},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a file from GEO soft file to the local machine — getGEOfile","text":"GEO Character string, GEO accession download (eg., GDS84, GPL96, GSE2553, GSM10) destdir Directory store resulting downloaded file. Defaults tempdir() AnnotGPL boolean defaulting FALSE whether use Annotation GPL information.  files nice use contain --date information remapped Entrez Gene regular basis. However, exist GPLs; general, available GPLs referenced GDS amount Amount information pull GEO.  applies GSE, GPL, GSM.  See details...","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a file from GEO soft file to the local machine — getGEOfile","text":"Invisibly returns full path downloaded file.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOfile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download a file from GEO soft file to the local machine — getGEOfile","text":"function downloads GEO SOFT files based accession number.  parsing.  first two arguments fairly self-explanatory, last based input acc.cgi url geo website.  default \"full\" mode, entire SOFT format file downloaded.  \"brief\" \"quick\" offer shortened versions files, good \"peeking\" file big download slow connection. Finally, \"data\" downloads data table part SOFT file good downloading simple EXCEL-like file use programs (convenience).","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOfile.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download a file from GEO soft file to the local machine — getGEOfile","text":"http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi","code":""},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOfile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download a file from GEO soft file to the local machine — getGEOfile","text":"Sean Davis","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGEOfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a file from GEO soft file to the local machine — getGEOfile","text":"","code":"# myfile <- getGEOfile('GDS10')"},{"path":"http://seandavi.github.io/GEOquery/reference/getGSEDataTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GSE data tables from GEO into R data structures. — getGSEDataTables","title":"Get GSE data tables from GEO into R data structures. — getGSEDataTables","text":"cases, instead individual sample records (GSM) containing information regarding sample phenotypes, GEO Series contains information attached data table.  example given GSE3494 two data tables important information contained within .  Using getGEO standard parameters downloads GSEMatrix file , unfortunately, contain information data tables.  function simply downloads ``header'' information GSE record parses data tables R data.frames.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGSEDataTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GSE data tables from GEO into R data structures. — getGSEDataTables","text":"","code":"getGSEDataTables(GSE)"},{"path":"http://seandavi.github.io/GEOquery/reference/getGSEDataTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GSE data tables from GEO into R data structures. — getGSEDataTables","text":"GSE GSE identifier, ``GSE3494''.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGSEDataTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GSE data tables from GEO into R data structures. — getGSEDataTables","text":"list data.frames.","code":""},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/reference/getGSEDataTables.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get GSE data tables from GEO into R data structures. — getGSEDataTables","text":"Sean Davis <sdavis2@mail.nih.gov>","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/getGSEDataTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GSE data tables from GEO into R data structures. — getGSEDataTables","text":"","code":"dfl = getGSEDataTables(\"GSE3494\") #> Rows: 251 Columns: 12 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (6): X1, X2, X5, X6, X7, X10 #> dbl (6): X3, X4, X8, X9, X11, X12 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 502 Columns: 3 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (3): X1, X2, X3 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. lapply(dfl,head) #> [[1]] #> # A tibble: 6 × 12 #>   `INDEX (ID)` `p53 seq mut status (p53+=mut…` `p53 DLDA clas…` `DLDA error (1…` #>   <chr>        <chr>                                      <dbl>            <dbl> #> 1 X101B88      p53+                                           1                0 #> 2 X102B06      p53+                                           1                0 #> 3 X104B91      p53+                                           0                1 #> 4 X110B34      p53+                                           1                0 #> 5 X111B51      p53+                                           1                0 #> 6 X127B00      p53+                                           1                0 #> # … with 8 more variables: `Elston histologic grade` <chr>, `ER status` <chr>, #> #   `PgR status` <chr>, `age at diagnosis` <dbl>, `tumor size (mm)` <dbl>, #> #   `Lymph node status` <chr>, #> #   `DSS TIME (Disease-Specific Survival Time in years)` <dbl>, #> #   `DSS EVENT (Disease-Specific Survival EVENT; 1=death from breast cancer, 0=alive or censored )` <dbl> #>  #> [[2]] #> # A tibble: 6 × 3 #>   `GEO Sample Accession #` `Patient ID` `Affy platform` #>   <chr>                    <chr>        <chr>           #> 1 GSM79114                 X100B08      HG-U133A        #> 2 GSM79115                 X101B88      HG-U133A        #> 3 GSM79116                 X102B06      HG-U133A        #> 4 GSM79117                 X103B41      HG-U133A        #> 5 GSM79118                 X104B91      HG-U133A        #> 6 GSM79119                 X105B13      HG-U133A        #>"},{"path":"http://seandavi.github.io/GEOquery/reference/gunzip.html","id":null,"dir":"Reference","previous_headings":"","what":"Gunzip a file — gunzip","title":"Gunzip a file — gunzip","text":"gunzip file","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/gunzip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gunzip a file — gunzip","text":"","code":"gunzip(   filename,   destname = gsub(\"[.]gz$\", \"\", filename),   overwrite = FALSE,   remove = TRUE,   BFR.SIZE = 1e+07 )"},{"path":"http://seandavi.github.io/GEOquery/reference/gunzip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gunzip a file — gunzip","text":"filename filename unzipped destname destination file overwrite Boolean indicating whether overwrite destfile name remove Boolean indicating whether remove original file completion BFR.SIZE size read buffer....","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/gunzip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gunzip a file — gunzip","text":"Invisibly, number bytes read.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/gunzip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gunzip a file — gunzip","text":"function stripped R.utils due breaking stuff bioconductor build machine.","code":""},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/reference/gunzip.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gunzip a file — gunzip","text":"Original author: Henrik Bengtsson","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/gunzip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gunzip a file — gunzip","text":"","code":"# gunzip('file.gz',remove=FALSE)"},{"path":"http://seandavi.github.io/GEOquery/reference/parseGEO.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse GEO text — parseGEO","title":"Parse GEO text — parseGEO","text":"Workhorse GEO parsers.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/parseGEO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse GEO text — parseGEO","text":"","code":"parseGEO(   fname,   GSElimits,   destdir = tempdir(),   AnnotGPL = FALSE,   getGPL = TRUE )"},{"path":"http://seandavi.github.io/GEOquery/reference/parseGEO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse GEO text — parseGEO","text":"fname filename SOFT format file.  filename ends .gz, gzfile() connection used read file directly. GSElimits Used limit number GSMs parsed GSE object; useful memory management large GSEs. destdir destination directory files saved (used caching) AnnotGPL Fetch annotation GPL available getGPL Fetch GPL associated GSEMatrix entity (remain TRUE normal use cases)","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/parseGEO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse GEO text — parseGEO","text":"parseGEO returns object associated type.  example, passed text GDS entry, GDS object returned.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/parseGEO.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse GEO text — parseGEO","text":"probably useful end-user.  Use getGEO access functions.  parseGEO simply delegates appropriate specific parser. reason use parseGPL, parseGDS, parseGSE, parseGSM functions directly.","code":""},{"path":[]},{"path":"http://seandavi.github.io/GEOquery/reference/parseGEO.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse GEO text — parseGEO","text":"Sean Davis","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/parseGSEMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a GSE mstrix file — parseGSEMatrix","title":"Parse a GSE mstrix file — parseGSEMatrix","text":"meant user calling, parses single GSEMatrix file.","code":""},{"path":"http://seandavi.github.io/GEOquery/reference/parseGSEMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a GSE mstrix file — parseGSEMatrix","text":"","code":"parseGSEMatrix(   fname,   AnnotGPL = FALSE,   destdir = tempdir(),   getGPL = TRUE,   parseCharacteristics = TRUE )"},{"path":"http://seandavi.github.io/GEOquery/reference/parseGSEMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a GSE mstrix file — parseGSEMatrix","text":"fname filename AnnotGPL set TRUE get annotation GPL version destdir destdination directory download getGPL whether get GPL associated parseCharacteristics Whether full \"characteristic\" parsing","code":""},{"path":"http://seandavi.github.io/GEOquery/news/index.html","id":"geoquery-2632","dir":"Changelog","previous_headings":"","what":"GEOquery 2.63.2","title":"GEOquery 2.63.2","text":"Added NEWS.md file track changes package.","code":""}]
